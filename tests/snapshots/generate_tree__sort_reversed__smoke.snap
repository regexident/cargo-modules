---
source: tests/generate_tree.rs
expression: output
---
STDERR:

STDOUT:

crate smoke
├── mod visibility: pub(crate)
│   └── mod dummy: pub(self)
│       ├── mod unions: pub(self)
│       │   ├── union PubSuper: pub(super)
│       │   ├── union PubPublic: pub
│       │   ├── union PubPrivate: pub(self)
│       │   ├── union PubModule: pub(in crate::visibility)
│       │   └── union PubCrate: pub(crate)
│       ├── mod traits: pub(self)
│       │   ├── mod safe: pub(self)
│       │   │   ├── trait PubSuper: pub(super)
│       │   │   ├── trait PubPublic: pub
│       │   │   ├── trait PubPrivate: pub(self)
│       │   │   ├── trait PubModule: pub(in crate::visibility)
│       │   │   └── trait PubCrate: pub(crate)
│       │   └── mod r#unsafe: pub(self)
│       │       ├── unsafe trait PubSuper: pub(super)
│       │       ├── unsafe trait PubPublic: pub
│       │       ├── unsafe trait PubPrivate: pub(self)
│       │       ├── unsafe trait PubModule: pub(in crate::visibility)
│       │       └── unsafe trait PubCrate: pub(crate)
│       ├── mod structs: pub(self)
│       │   ├── struct PubSuper: pub(super)
│       │   ├── struct PubPublic: pub
│       │   ├── struct PubPrivate: pub(self)
│       │   ├── struct PubModule: pub(in crate::visibility)
│       │   └── struct PubCrate: pub(crate)
│       ├── mod mods: pub(self)
│       │   ├── mod pub_super: pub(super)
│       │   ├── mod pub_public: pub
│       │   ├── mod pub_private: pub(self)
│       │   ├── mod pub_module: pub(in crate::visibility)
│       │   └── mod pub_crate: pub(crate)
│       ├── mod kinds: pub(self)
│       │   ├── unsafe trait UnsafeTrait: pub(self)
│       │   ├── unsafe fn UnsafeFunction: pub(self)
│       │   ├── union Union: pub(self)
│       │   ├── type TypeAlias: pub(self)
│       │   ├── type TraitAlias: pub(self)
│       │   ├── trait Trait: pub(self)
│       │   ├── struct Struct: pub(self)
│       │   ├── mod Module: pub(self)
│       │   ├── fn Function: pub(self)
│       │   ├── enum Enum: pub(self)
│       │   ├── const fn ConstFunction: pub(self)
│       │   └── async fn AsyncFunction: pub(self)
│       ├── mod fns: pub(self)
│       │   ├── fn pub_super: pub(super)
│       │   ├── fn pub_public: pub
│       │   ├── fn pub_private: pub(self)
│       │   ├── fn pub_module: pub(in crate::visibility)
│       │   └── fn pub_crate: pub(crate)
│       └── mod enums: pub(self)
│           ├── enum PubSuper: pub(super)
│           ├── enum PubPublic: pub
│           ├── enum PubPrivate: pub(self)
│           ├── enum PubModule: pub(in crate::visibility)
│           └── enum PubCrate: pub(crate)
├── mod uses: pub(crate)
│   └── mod cycle: pub(self)
│       ├── mod node_1: pub(self)
│       │   └── mod node_2: pub(self)
│       └── mod node_0: pub(self)
├── mod orphans: pub(crate)
├── mod methods: pub(crate)
│   ├── type Std: pub(self)
│   ├── struct Local: pub(self)
│   ├── struct Dummy: pub(self)
│   │   ├── fn outputs: pub(self)
│   │   ├── fn inputs: pub(self)
│   │   └── fn body: pub(self)
│   └── type Core: pub(self)
├── mod hierarchy: pub(crate)
│   └── mod lorem: pub(self)
│       ├── mod ipsum: pub(self)
│       │   └── struct Ipsum: pub(self)
│       ├── mod dolor: pub(self)
│       │   ├── mod sit: pub(self)
│       │   │   ├── mod amet: pub(self)
│       │   │   │   └── struct Amet: pub(self)
│       │   │   └── struct Sit: pub(self)
│       │   └── struct Dolor: pub(self)
│       ├── mod consectetur: pub(self)
│       │   ├── mod adipiscing: pub(self)
│       │   │   ├── mod elit: pub(self)
│       │   │   │   └── struct Elit: pub(self)
│       │   │   └── struct Adipiscing: pub(self)
│       │   └── struct Consectetur: pub(self)
│       └── struct Lorem: pub(self)
├── mod functions: pub(crate)
│   ├── fn outputs: pub(self)
│   ├── fn inputs: pub(self)
│   ├── fn body: pub(self)
│   ├── type Std: pub(self)
│   ├── struct Local: pub(self)
│   └── type Core: pub(self)
└── mod derives: pub(crate)
    └── struct Dummy: pub(self)

